pipeline {
    agent any

    environment {
        GITHUB_APP_CREDENTIALS_ID = 'afe25623-3632-4320-ad34-89ce96429f58'
        GIT_USERNAME = 'GidonAniz'
        INTERVAL_MINUTES = '5'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Setup') {
            steps {
                script {
                    sh 'apt-get update'
                    sh 'apt-get install -y python3-venv'
                    sh 'python3 -m venv venv'
                    sh '. venv/bin/activate && pip install pylint'
                }
            }
        }

        stage('Install Python Dependencies') {
            steps {
                script {
                    sh '. venv/bin/activate && pip install -r requirements.txt --target ./pip_cache'
                    sh '. venv/bin/activate && pip install boto3'
                }
            }
        }

        stage('Linting') {
            steps {
                script {
                    sh '. venv/bin/activate && pylint app.py || true'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'c92d3aa8-67ab-4cf2-b3c6-a5e67285ed2d', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo \${DOCKER_PASSWORD} | docker login -u \${DOCKER_USERNAME} --password-stdin
                        docker build -t gidonan/cicd:${BUILD_NUMBER} -f Dockerfile .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'c92d3aa8-67ab-4cf2-b3c6-a5e67285ed2d', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo \${DOCKER_PASSWORD} | docker login -u \${DOCKER_USERNAME} --password-stdin
                        docker push gidonan/cicd:${BUILD_NUMBER}
                        """
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    sh "docker run -d -e INTERVAL_MINUTES=${INTERVAL_MINUTES} gidonan/cicd:${BUILD_NUMBER}" > output.log"
                    sh 'cat output.log'
                }
            }
        }

        stage('Display Output') {
            steps {
                script {
                    sh 'cat output.log'
                }
            }
        }

        stage('Merge Dev to Master') {
            steps {
                script {
                    try {
                        sh 'git fetch origin dev'
                        sh 'git checkout dev'
                        sh 'git pull origin dev --allow-unrelated-histories --no-ff'
                        sh 'git checkout prod'
                        sh 'git merge --allow-unrelated-histories origin/dev'

                        def hasChanges = sh(script: 'git diff-index --quiet HEAD --', returnStatus: true) != 0

                        if (hasChanges) {
                            sh 'git commit -am "Merge changes from dev"'
                            withCredentials([usernamePassword(credentialsId: GITHUB_APP_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/GidonAniz/Jenkins-ci-cd.git prod"
                            }
                        } else {
                            echo 'No changes to merge. Skipping commit and push.'
                        }
                    } catch (Exception e) {
                        error "Error occurred while merging branches: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                catchError {
                    sh 'git reset --hard HEAD'
                }
            }
        }
        success {
            script {
                echo 'Merging and push successful'
            }
        }
        failure {
            echo 'Merging or push failed'
        }
    }
}
